# -*- coding: utf-8 -*-
"""nlp-assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15KyBbegRmKRvowNIhteVIqVWfbyvHcT0

###Problem 1
"""

import pandas as pd
import numpy as np
import nltk
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import string
import gensim.downloader as api
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from nltk.stem import WordNetLemmatizer
from sklearn.utils.class_weight import compute_class_weight
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

nltk.download('stopwords')

nltk.download('punkt')
nltk.download('punkt_tab')

df = pd.read_csv('spam.csv', encoding = 'latin-1')
df = df[['v1','v2']]
df.columns= ['labels','message']

stop_words = set(stopwords.words('english'))

def preprocess(text):
  text = text.lower()
  tokens=word_tokenize(text)
  tokens = [word for word in tokens if word.isalnum() and word not in stop_words]
  return tokens

df['tokens'] = df['message'].apply(preprocess)
print(df.head())

w2v_model = api.load('word2vec-google-news-300')

def vectorize(tokens, model, dim=300):
  vecs=[model[word] for word in tokens if word in model]
  if len(vecs) ==0:
    return np.zeros(dim)
  return np.mean(vecs, axis=0)

df['vector'] = df['tokens'].apply(lambda x: vectorize(x, w2v_model))

X = np.vstack(df['vector'].values)
y= (df['labels'] == 'spam').astype(int)

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

clf= LogisticRegression()
clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)
print("Test Accuracy:", accuracy_score(y_test,y_pred))

def predict_message_class(model,w2v_model,message):
  tokens = preprocess(message)
  vector = vectorize(tokens, w2v_model).reshape(1,-1)
  pred = model.predict(vector)
  return "Spam" if pred[0] == 1 else "Ham"

print(predict_message_class(clf,w2v_model, "Win a Free trip now!!"))

print(predict_message_class(clf,w2v_model,"Can we meet tomorrow?"))

"""###Problem 2"""

nltk.download('wordnet')

df = pd.read_csv('Tweets.csv')
df=df[['airline_sentiment','text']].dropna()

stop_words = set(nltk.corpus.stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

contractions = {
    "don't": "do not", "can't": "cannot", "won't": "will not", "i'm": "i am",
    "it's": "it is", "didn't": "did not", "doesn't": "does not", "couldn't": "could not",
    "shouldn't": "should not", "wouldn't": "would not"
}

def expand_contractions(text):
  pattern= re.compile('|'.join(re.escape(k) for k in contractions.keys()))
  return pattern.sub(lambda x: contractions[x.group(0)], text)

def preprocess(text):
  text = text.lower()
  text = expand_contractions(text)
  text = re.sub(r"http\S+|www.\S+","",text)
  text = re.sub(r"@\w+|#\w+","",text)
  text = re.sub(r"^\w\s","",text)
  tokens = nltk.word_tokenize(text)
  tokens = [lemmatizer.lemmatize(word) for word in tokens if word.isalnum() and word not in stop_words]

  return tokens

df['tokens'] = df['text'].apply(preprocess)

def vectorize(tokens, model, dim=300):
  vecs=[model[word] for word in tokens if word in model]
  return np.mean(vecs, axis=0) if vecs else np.zeros(dim)

df['vector'] = df['tokens'].apply(lambda x:vectorize(x, w2v_model))

X=np.vstack(df['vector'].values)
y=df['airline_sentiment']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

clf=LogisticRegression(multi_class='multinomial', solver='lbfgs',max_iter=1000,class_weight = 'balanced')
clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))

def predict_tweet_sentiment(model, w2v_model,tweet):
  tokens = preprocess(tweet)
  vec=vectorize(tokens,w2v_model).reshape(1,-1)
  pred = model.predict(vec)[0]
  return pred

#eg
print(predict_tweet_sentiment(clf,w2v_model,"I love this airline"))
print(predict_tweet_sentiment(clf,w2v_model,"I hate this airline"))

